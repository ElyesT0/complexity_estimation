{"mappings":"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","sources":["<anon>","animation_sequence.js"],"sourcesContent":["\"use strict\";\n/* ==========================================\n------------- Element's pointers ------------\n========================================== */ var bodyElement = document.body;\nvar containerFigureElement = document.querySelector(\".container-figure\");\n/* ==========================================\n-------------- Global variables -------------\n========================================== */ var txt_counter = 0;\n/* ==========================================\n------------- Classes definition ------------\n========================================== */ class ExperimentCl {\n    constructor(sequences = randomized_sequences){\n        this.participant_id = current_ID;\n        this.original_seq = [\n            ...sequences_training,\n            ...shuffled_sequences,\n            ...shuffled_bloc2_sequences\n        ];\n        this.seq = [\n            ...sequences_training,\n            ...randomized_sequences\n        ];\n        this.performance = [];\n        this.element_selectors = {};\n        this.confidence = [];\n        this.counter = 0;\n        this.presentation_time = true;\n        this.start_time = Date.now();\n        this.click_timings_before = []; //click_timings before go_signal\n        this.click_timings_after = []; //click_timings after go_signal\n        this.interclick_timings_before = [];\n        this.interclick_timings_after = [];\n        this.response_sequences_before = []; //response before go_signal\n        this.response_sequences_after = []; //response after go_signal\n        this.score = [];\n        this.current_score = initialScore;\n        this.screen_width = window.screen.width;\n        this.screen_height = window.screen.height;\n        this.set_delay = set_delay;\n        this.break_time = break_time;\n        this.SOA = SOA;\n        this.last_click = Date.now();\n        this.state = \"training\";\n        this.survey = sessionStorage.getItem(\"surveyChoices\"); //retrieve the participant's survey from last page\n    }\n    /* ----------------------------\n############## API ##############\n  ---------------------------- */ data_collection(response) {\n        /**\n     * Add the click event that will collect the data during the trial. Will be used in an event listener\n     *\n     * @param {str} response - Key pushed by the participant. Will be equal to the id of the circle.\n     *\n     */ let collect = (index)=>{\n            // index is either 0 or 1. 0 is for presentation phase, 1 is for reproduction phase.\n            let t_now = Date.now(); // set the value of this variable to current time in ms\n            if (index === 0) {\n                this.click_timings_before[this.counter - 1].push(t_now - this.start_time);\n                let arr_length = this.click_timings_before[this.counter - 1].length;\n                if (this.click_timings_before[this.counter - 1].length === 1) ;\n                else this.interclick_timings_before[this.counter - 1].push(this.click_timings_before[this.counter - 1][arr_length - 1] - this.click_timings_before[this.counter - 1][arr_length - 2]);\n                this.response_sequences_before[this.counter - 1].push(response);\n            } else {\n                this.click_timings_after[this.counter - 1].push(t_now - this.start_time);\n                let arr_length = this.click_timings_after[this.counter - 1].length;\n                if (this.click_timings_after[this.counter - 1].length === 1) ;\n                else this.interclick_timings_after[this.counter - 1].push(this.click_timings_after[this.counter - 1][arr_length - 1] - this.click_timings_after[this.counter - 1][arr_length - 2]);\n                this.response_sequences_after[this.counter - 1].push(response);\n            }\n        };\n        if (this.presentation_time) collect(0);\n        else collect(1);\n    }\n    create_csv() {\n    /* Purpose: Creates a CSV that will hold the data of the new participant. This\n    will be done synchronously to avoid overwriting two simultaneous participants' files */ }\n    /*  ----------------------------\n############## Visual rendering ##############\n  ---------------------------- */ draw() {\n        /* Purpose: This method will draw the figure on the screen */ function getSizeOfBrowserBars() {\n            const windowHeight = window.innerHeight;\n            const documentHeight = document.documentElement.clientHeight;\n            const urlBarHeight = window.outerHeight - windowHeight;\n            const bottomBarHeight = documentHeight - windowHeight - urlBarHeight;\n            return {\n                urlBarHeight: urlBarHeight,\n                bottomBarHeight: bottomBarHeight\n            };\n        }\n        let sizeBrowserBars = getSizeOfBrowserBars();\n        //Get measurements of the screen and log them in local variables\n        let screen_size_height = window.screen.height;\n        let screen_size_width = window.screen.width;\n        let urlBarHeight = sizeBrowserBars.urlBarHeight;\n        let bottomBarHeight = sizeBrowserBars.bottomBarHeight;\n        /* --- Styling the body ---*/ //Define desired constant styling values (in pixels)\n        let marginBody_topBottom = 10;\n        let marginBody_leftRight = 0;\n        let paddingBody_topBottom = 15;\n        let paddingBody_leftRight = 0;\n        let figure_radius = 150;\n        //Set the size of the body to be equal to window size\n        bodyElement.style.margin = `${marginBody_topBottom}px ${marginBody_leftRight}px`;\n        bodyElement.style.padding = `${paddingBody_topBottom}px ${paddingBody_leftRight}px`;\n        bodyElement.style.height = `${screen_size_height - marginBody_topBottom * 2 - paddingBody_topBottom * 2}px`;\n        /* --- Styling the figure container ---*/ //Define measurements useful for inside elements additions\n        let centerX_containerFigure = containerFigureElement.offsetWidth / 2;\n        let centerY_containerFigure = containerFigureElement.offsetHeight / 2;\n        let translate_up = 70;\n        //Create fixation cross\n        var fixationElement = document.createElement(\"div\");\n        fixationElement.classList.add(\"fixation\", \"no--zoom\");\n        containerFigureElement.appendChild(fixationElement);\n        // Create Pause for training\n        var pauseElement = document.createElement(\"div\");\n        pauseElement.textContent = \"Pause\";\n        pauseElement.classList.add(\"pause\", \"hidden\", \"no-zoom\");\n        pauseElement.style.top = `${centerY_containerFigure - translate_up}px`;\n        pauseElement.style.left = `${centerX_containerFigure}px`;\n        containerFigureElement.appendChild(pauseElement);\n        //Style fixation cross\n        fixationElement.textContent = \"+\";\n        let fixationElement_height = fixationElement.offsetHeight;\n        let fixationElement_width = fixationElement.offsetWidth;\n        fixationElement.style.top = `${centerY_containerFigure - fixationElement_height / 3 - translate_up}px`;\n        fixationElement.style.left = `${centerX_containerFigure - fixationElement_width / 3}px`;\n        fixationElement.classList.add(\"hidden\");\n        //Create the circles inside the container\n        var circleElements = [];\n        for(let i = 0; i < 6; i++){\n            var div = document.createElement(\"div\");\n            div.classList.add(\"circle\", \"no--zoom\");\n            div.classList.add(\"hidden\");\n            div.id = `circleElement-${i}`;\n            containerFigureElement.appendChild(div);\n            circleElements.push(div);\n        }\n        //Arange the circles in an hexagonal shape\n        // %%Defining key variables\n        let circle_radius = document.querySelector(\".circle\").offsetHeight;\n        let circle_coordinates_top = [\n            Math.sin(-Math.PI / 2),\n            Math.sin(-Math.PI / 6),\n            Math.sin(Math.PI / 6),\n            Math.sin(Math.PI / 2),\n            Math.sin(5 * Math.PI / 6),\n            Math.sin(-5 * Math.PI / 6)\n        ];\n        let circle_coordinates_left = [\n            Math.cos(-Math.PI / 2),\n            Math.cos(-Math.PI / 6),\n            Math.cos(Math.PI / 6),\n            Math.cos(Math.PI / 2),\n            Math.cos(5 * Math.PI / 6),\n            Math.cos(-5 * Math.PI / 6)\n        ];\n        circle_coordinates_top = circle_coordinates_top.map((coord)=>figure_radius * coord + centerY_containerFigure - circle_radius / 2);\n        circle_coordinates_left = circle_coordinates_left.map((coord)=>figure_radius * coord + centerX_containerFigure - circle_radius / 2);\n        // %%Positioning the circles\n        for(let i = 0; i < 6; i++){\n            circleElements[i].style.top = `${circle_coordinates_top[i] - translate_up}px`;\n            circleElements[i].style.left = `${circle_coordinates_left[i]}px`;\n        }\n        // Confidence buttons\n        var btn_confidence = [];\n        // -- Create a container for confidence buttons\n        var container_confidence = document.createElement(\"div\");\n        container_confidence.classList.add(\"container-confidence\", \"hidden\", \"no--zoom\");\n        containerFigureElement.appendChild(container_confidence);\n        // -- Center the confidence buttons\n        container_confidence.style.left = centerX_containerFigure / 5 + \"px\";\n        container_confidence.style.width = `${screen_size_width / 1.25}px`;\n        // -- Create confidence buttons and add them to the array of selectors\n        for(let i = 1; i < 5; i++){\n            var div = document.createElement(\"div\");\n            div.id = `conf-${i}`;\n            div.classList.add(\"btn-confidence\", \"no--zoom\");\n            div.textContent = `${i * 100}`;\n            container_confidence.appendChild(div);\n            btn_confidence.push(div);\n        }\n        // Create the Start Training button and place it\n        let btn_training = document.createElement(\"div\");\n        btn_training.textContent = \"TRAINING\";\n        btn_training.classList.add(\"btn--training\", \"no--zoom\");\n        btn_training.classList.add(\"no--zoom\");\n        btn_training.classList.add(\"hidden\");\n        btn_training.style.top = \"50%\";\n        containerFigureElement.appendChild(btn_training);\n        btn_training.style.left = \"50%\";\n        btn_training.style.transform = \"translate(-50%,0%)\";\n        // Create the Start Training button and place it\n        let btn_ok = document.createElement(\"div\");\n        btn_ok.textContent = \"OK\";\n        btn_ok.classList.add(\"btn--ok\", \"no--zoom\");\n        btn_ok.style.top = `${screen_size_height - translate_up * 2 - 15}px`;\n        containerFigureElement.appendChild(btn_ok);\n        btn_ok.style.left = \"50%\";\n        btn_ok.style.transform = `translate(-50%,-200%)`;\n        // Create the Next button and place it\n        let btn_next = document.createElement(\"div\");\n        btn_next.textContent = \"NEXT\";\n        btn_next.classList.add(\"btn--next\", \"no--zoom\");\n        containerFigureElement.appendChild(btn_next);\n        btn_next.style.top = `${screen_size_height - translate_up * 2 - 15}px`;\n        btn_next.style.left = \"50%\";\n        btn_next.style.transform = \"translate(-50%,-200%)\";\n        btn_next.classList.add(\"hidden\");\n        // Create the score text for Intermediate score page\n        let txt_score_increase = document.createElement(\"div\");\n        containerFigureElement.appendChild(txt_score_increase);\n        txt_score_increase.classList.add(\"increase\", \"no--zoom\");\n        txt_score_increase.classList.add(\"hidden\");\n        //Create the score text that will be displayed on top right\n        let txt_score = document.createElement(\"div\");\n        txt_score.classList.add(\"txt--score\", \"no--zoom\");\n        txt_score.textContent = `score : ${this.current_score}`;\n        bodyElement.appendChild(txt_score);\n        //style Text container\n        let txt_container = document.querySelector(\".text-container\");\n        txt_container.style.height = screen_size_height / 2 + \"px\";\n        txt_container.style.width = `${screen_size_width - 50}px`;\n        txt_container.textContent = instruction_training_start[txt_counter];\n        txt_counter += 1;\n        // Manage the size (1) and (2) location of the progression bar\n        // (1) Manage size\n        var chart = document.querySelector(\".chart\");\n        var chart_width = screen_size_width / 1.5;\n        chart.style.width = `${chart_width}px`;\n        chart.style.height = `${screen_size_height / 100}px`;\n        var bar = document.querySelector(\".bar\");\n        bar.style.width = `${chart_width}px`;\n        bar.style.height = `${screen_size_height / 100}px`;\n        // (2) Manage location\n        chart.style.left = `${screen_size_width / 2 - chart_width / 2}px`;\n        const progression_bar = document.getElementById(\"progression--bar\");\n        /* --- Add created elements to the object element_selectors ---\n    Then we are able to use them in other methods. This will allow animating them,\n    making them appear/disappear, linking event listeners to them without\n    creating unwanted interactions */ this.element_selectors.circles = circleElements;\n        this.element_selectors.fixation = fixationElement;\n        this.element_selectors.confidence = btn_confidence;\n        this.element_selectors.container_confidence = container_confidence;\n        this.element_selectors.btn_next = btn_next;\n        this.element_selectors.btn_training = btn_training;\n        this.element_selectors.btn_ok = btn_ok;\n        this.element_selectors.txt_score_increase = txt_score_increase;\n        this.element_selectors.txt_score = txt_score;\n        this.element_selectors.txt_container = txt_container;\n        this.element_selectors.pauseElement = pauseElement;\n        this.element_selectors.progression_bar = progression_bar;\n    }\n    init() {\n        /**\n     * Initialize all the event listeners after the first drawing of the figure\n     *\n     * @param {Type} paramName - Description of the parameter.\n     *\n     * @returns {Type} Description of the return value.\n     */ // The button ok goes through the explanations and once it's over, button Training appears\n        this.element_selectors.btn_ok.addEventListener(keyEvent, ()=>{\n            if (this.state === \"training\") {\n                if (txt_counter < instruction_training_start.length) {\n                    this.element_selectors.txt_container.textContent = instruction_training_start[txt_counter];\n                    txt_counter += 1;\n                } else {\n                    this.element_selectors.btn_ok.classList.add(\"hidden\");\n                    this.element_selectors.txt_container.classList.add(\"hidden\");\n                    txt_counter = 0;\n                    this.element_selectors.txt_container.textContent = instruction_training_end[txt_counter];\n                    this.element_selectors.btn_training.classList.remove(\"hidden\");\n                }\n            } else if (txt_counter < instruction_training_end.length) {\n                this.element_selectors.txt_container.textContent = instruction_training_end[txt_counter];\n                txt_counter += 1;\n            } else {\n                this.element_selectors.btn_ok.classList.add(\"hidden\");\n                this.element_selectors.txt_container.classList.add(\"hidden\");\n                this.trial();\n            }\n        });\n        // The button training will start the presentation of sequences\n        this.element_selectors.btn_training.addEventListener(keyEvent, ()=>{\n            setTimeout(()=>this.trial(this.seq[this.counter]), this.set_delay);\n            this.element_selectors.btn_training.classList.add(\"hidden\");\n            this.element_selectors.txt_container.classList.add(\"hidden\");\n        });\n        for(let k = 0; k < this.seq.length; k++){\n            this.interclick_timings_before.push([]); //Both have two arrays: first is for pre-reproduction, Second is for reproduction\n            this.interclick_timings_after.push([]); //Both have two arrays: first is for pre-reproduction, Second is for reproduction\n            this.click_timings_before.push([]);\n            this.click_timings_after.push([]);\n            this.response_sequences_before.push([]);\n            this.response_sequences_after.push([]);\n        }\n        for(let i = 0; i < 6; i++)this.element_selectors.circles[i].addEventListener(keyEvent, ()=>this.data_collection(i));\n        for(let i = 0; i < 4; i++)this.element_selectors.confidence[i].addEventListener(keyEvent, ()=>{\n            /* Purpose: is attached to confidence buttons. End a trial once at least 4 items have been entered */ console.log(\"this.response_sequences_after : \", this.response_sequences_after);\n            if (this.response_sequences_after[this.counter - 1].length < 3) ;\n            else {\n                let { final_score, feedbackTXT } = this.display_score_update(i);\n                this.element_selectors.txt_score.textContent = `score: ${final_score}`;\n                this.element_selectors.txt_score_increase.textContent = `${feedbackTXT}`;\n                this.log_intermediate_data();\n            }\n        });\n        this.element_selectors.btn_next.addEventListener(keyEvent, ()=>{\n            if (this.counter === sequences_training.length) {\n                this.state = \"main_experiment\";\n                completion = 0;\n                progress = 0;\n                this.element_selectors.btn_ok.classList.remove(\"hidden\");\n                this.element_selectors.txt_container.classList.remove(\"hidden\");\n                this.current_score = initialScore;\n                this.element_selectors.progression_bar.classList.add(\"hidden\");\n                this.element_selectors.txt_score.textContent = `score : ${this.current_score}`;\n                this.reset_next();\n            } else if (Date.now() - this.last_click > 1000) {\n                this.trial(this.seq[this.counter]);\n                this.reset_next();\n            }\n        });\n    }\n    elements() {\n        /* Purpose: Allows retrieving elements selectors from the object */ return this.element_selectors;\n    }\n    activate_point(circleElement) {\n        /* Purpose: Animate the point circleElement (ex: this.element_selectors.circles[0]) on the screen. Used in presentation() lower down.*/ circleElement.classList.add(\"circle--active\");\n        setTimeout(()=>{\n            circleElement.classList.remove(\"circle--active\");\n        }, blink);\n    }\n    start() {\n        /* Purpose: start the experiment*/ console.log(\"starting experiment\", this.element_selectors.length);\n        for(let i = 0; i < Object.keys(this.element_selectors.circles).length; i++){\n            //FIXME Ne fonctionne pas, je veux cacher tous les éléments et afficher le bouton START\n            //TODO Regarder la partie AJAX du cours Javascript\n            console.log(this.element_selectors.cicles);\n            console.log(Object.keys(this.element_selectors.cicles[i]));\n        // this.element_selectors[\n        //   Object.keys(this.element_selectors)[i]\n        // ].classList.add('hidden');\n        }\n    }\n    /*  ----------------------------\n############## App Dynamics ##############\n  ---------------------------- */ counter_increment() {\n        this.counter += 1;\n    }\n    click() {\n    /**\n     * Handle touch events/clicks by logging the click into the response array and activating the point for some duration after the point\n     * has been touched\n     *\n     * @param {Type} paramName - Description of the parameter.\n     *\n     * @returns {Type} Description of the return value.\n     */ }\n    /*----------------------------------------------------------------------------------------------------------\n ******************************************** Display Methods ********************************************\n----------------------------------------------------------------------------------------------------------*/ explanations(before = true) {\n        /* Purpose: Display Explanations on the screen. Pass to the next explanation with the ok button \n    before=true indicates that the explanations served are presented before the start of training\n    before=false indicates that the explanations served are presented after the end of training\n    */ this.element_selectors.btn_ok.classList.remove(\"hidden\");\n        before;\n    }\n    reset_next() {\n        this.element_selectors.btn_next.classList.add(\"hidden\");\n        this.element_selectors.txt_score_increase.classList.add(\"hidden\");\n        document.querySelector(\"body\").classList.remove(\"success\");\n        document.querySelector(\"body\").classList.remove(\"fail\");\n        document.querySelector(\"body\").classList.remove(\"moderate--failure\");\n    }\n    hideFigure() {\n        /*Purpose: Hides the hexagon*/ this.element_selectors.container_confidence.classList.add(\"hidden\");\n        this.element_selectors.progression_bar.classList.add(\"hidden\");\n        this.element_selectors.fixation.classList.add(\"hidden\");\n        for(let i = 0; i < element_selectors.circles.length; i++)this.element_selectors.circles[i].classList.add(\"hidden\");\n    }\n    display_screen_next() {\n        /*Purpose: Display the screen with score update and next button*/ this.element_selectors.btn_next.classList.remove(\"hidden\");\n        this.hideFigure();\n        this.element_selectors.txt_score_increase.classList.remove(\"hidden\");\n    }\n    display_score_update(confidence, current_seq = this.seq[this.counter - 1], current_sequence_response = this.response_sequences_after[this.counter - 1]) {\n        let { final_score, feedbackTXT } = score_update(this.seq[this.counter - 1], this.response_sequences_after[this.counter - 1], (confidence + 1) * 100, this.current_score, this.element_selectors.txt_score_increase);\n        let score_gain = final_score - this.current_score;\n        //Assessing performance and registering it to the data\n        if (current_seq.join() === current_sequence_response.join()) {\n            let current_performance = \"success\";\n            this.performance.push(current_performance);\n            //update screen display of current gain or loss\n            feedbackTXT = `${feedbackTXT} \\n+${score_gain}`;\n            //Success animation\n            document.querySelector(\"body\").classList.add(\"success\");\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.remove(\"success\");\n            }, 100);\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.add(\"success\");\n            }, 250);\n        } else if (score_gain > 0) {\n            let current_performance = \"fail\";\n            //update display of current gain or loss\n            feedbackTXT = `${feedbackTXT} \\n+${score_gain}`;\n            this.performance.push(current_performance);\n            //moderate--failure animation\n            document.querySelector(\"body\").classList.add(\"moderate--failure\");\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.remove(\"moderate--failure\");\n            }, 100);\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.add(\"moderate--failure\");\n            }, 250);\n        } else {\n            let current_performance = \"fail\";\n            //update display of current gain or loss\n            feedbackTXT = `${feedbackTXT} \\n ${score_gain}`;\n            this.performance.push(current_performance);\n            //Fail animation\n            document.querySelector(\"body\").classList.add(\"fail\");\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.remove(\"fail\");\n            }, 100);\n            setTimeout(function() {\n                document.querySelector(\"body\").classList.add(\"fail\");\n            }, 250);\n        }\n        this.confidence.push(confidence * 100);\n        this.score.push(final_score);\n        this.current_score = final_score;\n        this.display_screen_next();\n        this.last_click = Date.now();\n        return {\n            final_score,\n            feedbackTXT\n        };\n    }\n    log_intermediate_data() {\n        var data_experiment = convertCSV(this);\n        console.log(\"intermediate data has been sent\");\n        send_post(data_experiment);\n        /* Purpose: Logging a line with the new values in a common CSV */ let data2send = this;\n        console.log(\"data2send:\", data2send);\n        postData(serverAddress, data2send).then(()=>{\n            console.log(\"Data has been sent\"); // JSON data parsed by `data.json()` call\n        });\n    }\n    /*--------------------------------------------------------------------------------------------------------\n ******************************************** Experiment timeline methods **********************************\n----------------------------------------------------------------------------------------------------------*/ presentation(seq = this.seq) {\n        /**\n     * display the sequences of positions one after the other on the screen\n     *\n     * @param {array} seq - The array containing the sequence to be played.\n     *\n     *\n     * @returns {animation} animate the screen based on the sequence pattern to be played\n     */ this.presentation_time = true;\n        this.element_selectors.fixation.classList.remove(\"hidden\");\n        this.element_selectors.fixation.style.color = \"white\";\n        for(let i = 0; i < this.element_selectors.circles.length; i++){\n            this.element_selectors.circles[i].classList.remove(\"hidden\");\n            //FIXME NEW\n            this.element_selectors.circles[i].classList.remove(\"circle--reproduction\");\n        }\n        for(let i = 0; i < seq.length; i++)setTimeout(()=>this.activate_point(this.element_selectors.circles[seq[i]]), SOA * (i + 1));\n        // update the progression bar\n        update_progression(completion);\n    }\n    reproduction() {\n        /* Purpose: display the response screen */ this.presentation_time = false;\n        for(let i = 0; i < this.element_selectors.circles.length; i++)this.element_selectors.circles[i].classList.add(\"circle--reproduction\");\n        this.element_selectors.progression_bar.classList.remove(\"hidden\");\n        this.element_selectors.container_confidence.classList.remove(\"hidden\");\n    }\n    pre_rep_break() {\n        let total_break_time = this.set_delay + this.seq[this.counter].length * this.SOA + this.break_time;\n        //purpose: creates a short break between end of presentation and start of reproduction\n        setTimeout(()=>{\n            //hide the validation button to signify the break\n            this.element_selectors.fixation.classList.add(\"hidden\");\n            if (this.state === \"training\") this.element_selectors.pauseElement.classList.remove(\"hidden\");\n        }, total_break_time - this.break_time);\n        setTimeout(()=>{\n            //display the validation button and the fixation cross to signify start of reproduction\n            this.element_selectors.fixation.style.color = \"#3bc9db\";\n            this.element_selectors.fixation.classList.remove(\"hidden\");\n            this.element_selectors.pauseElement.classList.add(\"hidden\");\n            this.element_selectors.progression_bar.classList.remove(\"hidden\");\n        }, total_break_time);\n        return total_break_time;\n    }\n    end_experiment() {\n        //Sends data to the server to write in CSV\n        var data_experiment = convertCSV(this);\n        console.log(\"data_experiment = \", data_experiment);\n        send_post(data_experiment);\n        this.hideFigure();\n        this.element_selectors.txt_container.classList.remove(\"hidden\");\n        this.element_selectors.txt_container.textContent = \"You have finished the experiment. Thank you for your participation !\";\n    }\n    trial(seq = this.seq[this.counter]) {\n        /* Purpose: Does one cycle of Presentation + Reproduction */ if (this.counter < this.seq.length - 1) {\n            this.presentation(seq);\n            let delay = this.pre_rep_break();\n            setTimeout(()=>this.reproduction(), delay);\n            this.counter_increment();\n        } else this.end_experiment();\n    }\n    /*--------------------------------------------------------------------------------------------------------\n ******************************************** Debugging Methods **********************************\n----------------------------------------------------------------------------------------------------------*/ info() {\n        console.log(this);\n        console.log(this.element_selectors);\n        console.log(\"Tested sequences: \", this.seq);\n    }\n    testDataTransmission() {\n        /*>Purpose: Fill in an instance of the class with keys as values and sends the data to the server for test*/ const defaultValues = {\n            performance: [],\n            element_selectors: {},\n            confidence: [],\n            click_timings_before: [],\n            click_timings_after: [],\n            interclick_timings_before: [],\n            interclick_timings_after: [],\n            response_sequences_before: [],\n            response_sequences_after: [],\n            score: [],\n            survey: null\n        };\n        for(const key in defaultValues)if (this[key] === undefined || this[key] === null) this[key] = defaultValues[key];\n        this.end_experiment();\n    }\n}\n//#################################################################### END OF CLASS\n/* ==========================================\n-------------- Code Execution --------------\n========================================== */ //Style the main container\ncontainerFigureElement.style.height = `${document.documentElement.clientHeight}px`;\ncontainerFigureElement.style.width = `${document.documentElement.clientWidth}px`;\nconst online_exp = new ExperimentCl();\nonline_exp.draw();\nconst element_selectors = online_exp.elements();\nonline_exp.init();\n/* ==========================================\n--------------------- TODO ------------------\n========================================== */ /*\n1. Presentation of sequences\n2. Reproduction screen\n3. Capturing participants' inputs\n4. In real-time using node.js logging in their results in a csv\n    a. Logging a line with the new values in a common CSV\n    b. (at the end, create a new csv file with only data from this participant)\n\n*/ /* NOTE\n=================================================\n+++++++++++++++++ Bug fixes +++++++++++++++++++++\n=================================================\n*/ // Disable pinch zoom\ndocument.addEventListener(\"gesturestart\", function(e) {\n    e.preventDefault();\n});\n// Disable double tap zoom\ndocument.addEventListener(\"dblclick\", function(e) {\n    e.preventDefault();\n}); //TODO\n // Régler le CSV de manière à avoir chaque ligne avec seq, response ... plutôt que toutes_seq puis toutes_reponses (faire comme dans le convertCSV de la V0)\n\n//# sourceMappingURL=animation_sequence.7d2c459f.js.map\n","'use strict';\n\n/* ==========================================\n------------- Element's pointers ------------\n========================================== */\n\nvar bodyElement = document.body;\nvar containerFigureElement = document.querySelector('.container-figure');\n\n/* ==========================================\n-------------- Global variables -------------\n========================================== */\nvar txt_counter = 0;\n\n/* ==========================================\n------------- Classes definition ------------\n========================================== */\n\nclass ExperimentCl {\n  constructor(sequences = randomized_sequences) {\n    this.participant_id = current_ID;\n    this.original_seq = [\n      ...sequences_training,\n      ...shuffled_sequences,\n      ...shuffled_bloc2_sequences,\n    ];\n    this.seq = [...sequences_training, ...randomized_sequences];\n    this.performance = [];\n    this.element_selectors = {};\n    this.confidence = [];\n    this.counter = 0;\n    this.presentation_time = true;\n    this.start_time = Date.now();\n    this.click_timings_before = []; //click_timings before go_signal\n    this.click_timings_after = []; //click_timings after go_signal\n    this.interclick_timings_before = [];\n    this.interclick_timings_after = [];\n    this.response_sequences_before = []; //response before go_signal\n    this.response_sequences_after = []; //response after go_signal\n    this.score = [];\n    this.current_score = initialScore;\n    this.screen_width = window.screen.width;\n    this.screen_height = window.screen.height;\n    this.set_delay = set_delay;\n    this.break_time = break_time;\n    this.SOA = SOA;\n    this.last_click = Date.now();\n    this.state = 'training';\n    this.survey = sessionStorage.getItem('surveyChoices'); //retrieve the participant's survey from last page\n  }\n  /* ----------------------------\n############## API ##############\n  ---------------------------- */\n  data_collection(response) {\n    /**\n     * Add the click event that will collect the data during the trial. Will be used in an event listener\n     *\n     * @param {str} response - Key pushed by the participant. Will be equal to the id of the circle.\n     *\n     */\n\n    let collect = (index) => {\n      // index is either 0 or 1. 0 is for presentation phase, 1 is for reproduction phase.\n      let t_now = Date.now(); // set the value of this variable to current time in ms\n\n      if (index === 0) {\n        this.click_timings_before[this.counter - 1].push(\n          t_now - this.start_time\n        );\n        let arr_length = this.click_timings_before[this.counter - 1].length;\n        if (this.click_timings_before[this.counter - 1].length === 1) {\n          //do nothing\n        } else {\n          this.interclick_timings_before[this.counter - 1].push(\n            this.click_timings_before[this.counter - 1][arr_length - 1] -\n              this.click_timings_before[this.counter - 1][arr_length - 2]\n          );\n        }\n        this.response_sequences_before[this.counter - 1].push(response);\n      } else {\n        this.click_timings_after[this.counter - 1].push(\n          t_now - this.start_time\n        );\n        let arr_length = this.click_timings_after[this.counter - 1].length;\n        if (this.click_timings_after[this.counter - 1].length === 1) {\n          //do nothing\n        } else {\n          this.interclick_timings_after[this.counter - 1].push(\n            this.click_timings_after[this.counter - 1][arr_length - 1] -\n              this.click_timings_after[this.counter - 1][arr_length - 2]\n          );\n        }\n        this.response_sequences_after[this.counter - 1].push(response);\n      }\n    };\n\n    if (this.presentation_time) {\n      collect(0);\n    } else {\n      collect(1);\n    }\n  }\n  create_csv() {\n    /* Purpose: Creates a CSV that will hold the data of the new participant. This\n    will be done synchronously to avoid overwriting two simultaneous participants' files */\n  }\n  /*  ----------------------------\n############## Visual rendering ##############\n  ---------------------------- */\n  draw() {\n    /* Purpose: This method will draw the figure on the screen */\n    function getSizeOfBrowserBars() {\n      const windowHeight = window.innerHeight;\n      const documentHeight = document.documentElement.clientHeight;\n      const urlBarHeight = window.outerHeight - windowHeight;\n      const bottomBarHeight = documentHeight - windowHeight - urlBarHeight;\n\n      return {\n        urlBarHeight: urlBarHeight,\n        bottomBarHeight: bottomBarHeight,\n      };\n    }\n    let sizeBrowserBars = getSizeOfBrowserBars();\n    //Get measurements of the screen and log them in local variables\n    let screen_size_height = window.screen.height;\n    let screen_size_width = window.screen.width;\n    let urlBarHeight = sizeBrowserBars.urlBarHeight;\n    let bottomBarHeight = sizeBrowserBars.bottomBarHeight;\n\n    /* --- Styling the body ---*/\n    //Define desired constant styling values (in pixels)\n    let marginBody_topBottom = 10;\n    let marginBody_leftRight = 0;\n    let paddingBody_topBottom = 15;\n    let paddingBody_leftRight = 0;\n    let figure_radius = 150;\n\n    //Set the size of the body to be equal to window size\n    bodyElement.style.margin = `${marginBody_topBottom}px ${marginBody_leftRight}px`;\n    bodyElement.style.padding = `${paddingBody_topBottom}px ${paddingBody_leftRight}px`;\n    bodyElement.style.height = `${\n      screen_size_height - marginBody_topBottom * 2 - paddingBody_topBottom * 2\n    }px`;\n\n    /* --- Styling the figure container ---*/\n    //Define measurements useful for inside elements additions\n    let centerX_containerFigure = containerFigureElement.offsetWidth / 2;\n    let centerY_containerFigure = containerFigureElement.offsetHeight / 2;\n    let translate_up = 70;\n\n    //Create fixation cross\n    var fixationElement = document.createElement('div');\n    fixationElement.classList.add('fixation', 'no--zoom');\n    containerFigureElement.appendChild(fixationElement);\n\n    // Create Pause for training\n    var pauseElement = document.createElement('div');\n    pauseElement.textContent = 'Pause';\n    pauseElement.classList.add('pause', 'hidden', 'no-zoom');\n    pauseElement.style.top = `${centerY_containerFigure - translate_up}px`;\n    pauseElement.style.left = `${centerX_containerFigure}px`;\n    containerFigureElement.appendChild(pauseElement);\n\n    //Style fixation cross\n    fixationElement.textContent = '+';\n    let fixationElement_height = fixationElement.offsetHeight;\n    let fixationElement_width = fixationElement.offsetWidth;\n    fixationElement.style.top = `${\n      centerY_containerFigure - fixationElement_height / 3 - translate_up\n    }px`;\n    fixationElement.style.left = `${\n      centerX_containerFigure - fixationElement_width / 3\n    }px`;\n    fixationElement.classList.add('hidden');\n\n    //Create the circles inside the container\n    var circleElements = [];\n    for (let i = 0; i < 6; i++) {\n      var div = document.createElement('div');\n      div.classList.add('circle', 'no--zoom');\n      div.classList.add('hidden');\n      div.id = `circleElement-${i}`;\n      containerFigureElement.appendChild(div);\n      circleElements.push(div);\n    }\n\n    //Arange the circles in an hexagonal shape\n    // %%Defining key variables\n    let circle_radius = document.querySelector('.circle').offsetHeight;\n    let circle_coordinates_top = [\n      Math.sin(-Math.PI / 2),\n      Math.sin(-Math.PI / 6),\n      Math.sin(Math.PI / 6),\n      Math.sin(Math.PI / 2),\n      Math.sin((5 * Math.PI) / 6),\n      Math.sin((-5 * Math.PI) / 6),\n    ];\n    let circle_coordinates_left = [\n      Math.cos(-Math.PI / 2),\n      Math.cos(-Math.PI / 6),\n      Math.cos(Math.PI / 6),\n      Math.cos(Math.PI / 2),\n      Math.cos((5 * Math.PI) / 6),\n      Math.cos((-5 * Math.PI) / 6),\n    ];\n    circle_coordinates_top = circle_coordinates_top.map(\n      (coord) =>\n        figure_radius * coord + centerY_containerFigure - circle_radius / 2\n    );\n    circle_coordinates_left = circle_coordinates_left.map(\n      (coord) =>\n        figure_radius * coord + centerX_containerFigure - circle_radius / 2\n    );\n\n    // %%Positioning the circles\n    for (let i = 0; i < 6; i++) {\n      circleElements[i].style.top = `${\n        circle_coordinates_top[i] - translate_up\n      }px`;\n      circleElements[i].style.left = `${circle_coordinates_left[i]}px`;\n    }\n\n    // Confidence buttons\n    var btn_confidence = [];\n    // -- Create a container for confidence buttons\n    var container_confidence = document.createElement('div');\n    container_confidence.classList.add(\n      'container-confidence',\n      'hidden',\n      'no--zoom'\n    );\n    containerFigureElement.appendChild(container_confidence);\n    // -- Center the confidence buttons\n    container_confidence.style.left = centerX_containerFigure / 5 + 'px';\n    container_confidence.style.width = `${screen_size_width / 1.25}px`;\n\n    // -- Create confidence buttons and add them to the array of selectors\n    for (let i = 1; i < 5; i++) {\n      var div = document.createElement('div');\n      div.id = `conf-${i}`;\n      div.classList.add('btn-confidence', 'no--zoom');\n      div.textContent = `${i * 100}`;\n      container_confidence.appendChild(div);\n      btn_confidence.push(div);\n    }\n\n    // Create the Start Training button and place it\n    let btn_training = document.createElement('div');\n    btn_training.textContent = 'TRAINING';\n    btn_training.classList.add('btn--training', 'no--zoom');\n    btn_training.classList.add('no--zoom');\n    btn_training.classList.add('hidden');\n    btn_training.style.top = '50%';\n    containerFigureElement.appendChild(btn_training);\n    btn_training.style.left = '50%';\n    btn_training.style.transform = 'translate(-50%,0%)';\n\n    // Create the Start Training button and place it\n    let btn_ok = document.createElement('div');\n    btn_ok.textContent = 'OK';\n    btn_ok.classList.add('btn--ok', 'no--zoom');\n    btn_ok.style.top = `${screen_size_height - translate_up * 2 - 15}px`;\n    containerFigureElement.appendChild(btn_ok);\n    btn_ok.style.left = '50%';\n    btn_ok.style.transform = `translate(-50%,-200%)`;\n\n    // Create the Next button and place it\n    let btn_next = document.createElement('div');\n    btn_next.textContent = 'NEXT';\n    btn_next.classList.add('btn--next', 'no--zoom');\n    containerFigureElement.appendChild(btn_next);\n    btn_next.style.top = `${screen_size_height - translate_up * 2 - 15}px`;\n    btn_next.style.left = '50%';\n    btn_next.style.transform = 'translate(-50%,-200%)';\n    btn_next.classList.add('hidden');\n\n    // Create the score text for Intermediate score page\n    let txt_score_increase = document.createElement('div');\n    containerFigureElement.appendChild(txt_score_increase);\n    txt_score_increase.classList.add('increase', 'no--zoom');\n    txt_score_increase.classList.add('hidden');\n\n    //Create the score text that will be displayed on top right\n    let txt_score = document.createElement('div');\n    txt_score.classList.add('txt--score', 'no--zoom');\n    txt_score.textContent = `score : ${this.current_score}`;\n    bodyElement.appendChild(txt_score);\n\n    //style Text container\n    let txt_container = document.querySelector('.text-container');\n    txt_container.style.height = screen_size_height / 2 + 'px';\n    txt_container.style.width = `${screen_size_width - 50}px`;\n    txt_container.textContent = instruction_training_start[txt_counter];\n    txt_counter += 1;\n\n    // Manage the size (1) and (2) location of the progression bar\n    // (1) Manage size\n    var chart = document.querySelector('.chart');\n    var chart_width = screen_size_width / 1.5;\n    chart.style.width = `${chart_width}px`;\n    chart.style.height = `${screen_size_height / 100}px`;\n    var bar = document.querySelector('.bar');\n    bar.style.width = `${chart_width}px`;\n    bar.style.height = `${screen_size_height / 100}px`;\n    // (2) Manage location\n\n    chart.style.left = `${screen_size_width / 2 - chart_width / 2}px`;\n    const progression_bar = document.getElementById('progression--bar');\n\n    /* --- Add created elements to the object element_selectors ---\n    Then we are able to use them in other methods. This will allow animating them,\n    making them appear/disappear, linking event listeners to them without\n    creating unwanted interactions */\n    this.element_selectors.circles = circleElements;\n    this.element_selectors.fixation = fixationElement;\n    this.element_selectors.confidence = btn_confidence;\n    this.element_selectors.container_confidence = container_confidence;\n    this.element_selectors.btn_next = btn_next;\n    this.element_selectors.btn_training = btn_training;\n    this.element_selectors.btn_ok = btn_ok;\n    this.element_selectors.txt_score_increase = txt_score_increase;\n    this.element_selectors.txt_score = txt_score;\n    this.element_selectors.txt_container = txt_container;\n    this.element_selectors.pauseElement = pauseElement;\n    this.element_selectors.progression_bar = progression_bar;\n  }\n\n  init() {\n    /**\n     * Initialize all the event listeners after the first drawing of the figure\n     *\n     * @param {Type} paramName - Description of the parameter.\n     *\n     * @returns {Type} Description of the return value.\n     */\n    // The button ok goes through the explanations and once it's over, button Training appears\n    this.element_selectors.btn_ok.addEventListener(keyEvent, () => {\n      if (this.state === 'training') {\n        if (txt_counter < instruction_training_start.length) {\n          this.element_selectors.txt_container.textContent =\n            instruction_training_start[txt_counter];\n          txt_counter += 1;\n        } else {\n          this.element_selectors.btn_ok.classList.add('hidden');\n          this.element_selectors.txt_container.classList.add('hidden');\n          txt_counter = 0;\n          this.element_selectors.txt_container.textContent =\n            instruction_training_end[txt_counter];\n          this.element_selectors.btn_training.classList.remove('hidden');\n        }\n      }\n      // Case: starting main experiment after explanations and training\n      else {\n        if (txt_counter < instruction_training_end.length) {\n          this.element_selectors.txt_container.textContent =\n            instruction_training_end[txt_counter];\n          txt_counter += 1;\n        } else {\n          this.element_selectors.btn_ok.classList.add('hidden');\n          this.element_selectors.txt_container.classList.add('hidden');\n          this.trial();\n        }\n      }\n    });\n\n    // The button training will start the presentation of sequences\n    this.element_selectors.btn_training.addEventListener(keyEvent, () => {\n      setTimeout(() => this.trial(this.seq[this.counter]), this.set_delay);\n      this.element_selectors.btn_training.classList.add('hidden');\n      this.element_selectors.txt_container.classList.add('hidden');\n    });\n    for (let k = 0; k < this.seq.length; k++) {\n      this.interclick_timings_before.push([]); //Both have two arrays: first is for pre-reproduction, Second is for reproduction\n      this.interclick_timings_after.push([]); //Both have two arrays: first is for pre-reproduction, Second is for reproduction\n      this.click_timings_before.push([]);\n      this.click_timings_after.push([]);\n      this.response_sequences_before.push([]);\n      this.response_sequences_after.push([]);\n    }\n    for (let i = 0; i < 6; i++) {\n      this.element_selectors.circles[i].addEventListener(keyEvent, () =>\n        this.data_collection(i)\n      );\n    }\n    for (let i = 0; i < 4; i++) {\n      this.element_selectors.confidence[i].addEventListener(keyEvent, () => {\n        /* Purpose: is attached to confidence buttons. End a trial once at least 4 items have been entered */\n        console.log(\n          'this.response_sequences_after : ',\n          this.response_sequences_after\n        );\n        if (this.response_sequences_after[this.counter - 1].length < 3) {\n          // in this scenario, we do nothing and wait for more inputs\n        } else {\n          let { final_score, feedbackTXT } = this.display_score_update(i);\n          this.element_selectors.txt_score.textContent = `score: ${final_score}`;\n          this.element_selectors.txt_score_increase.textContent = `${feedbackTXT}`;\n          this.log_intermediate_data();\n        }\n      });\n    }\n\n    this.element_selectors.btn_next.addEventListener(keyEvent, () => {\n      if (this.counter === sequences_training.length) {\n        this.state = 'main_experiment';\n        completion = 0;\n        progress = 0;\n        this.element_selectors.btn_ok.classList.remove('hidden');\n        this.element_selectors.txt_container.classList.remove('hidden');\n        this.current_score = initialScore;\n        this.element_selectors.progression_bar.classList.add('hidden');\n        this.element_selectors.txt_score.textContent = `score : ${this.current_score}`;\n        this.reset_next();\n      } else {\n        if (Date.now() - this.last_click > 1000) {\n          this.trial(this.seq[this.counter]);\n          this.reset_next();\n        }\n      }\n    });\n  }\n\n  elements() {\n    /* Purpose: Allows retrieving elements selectors from the object */\n    return this.element_selectors;\n  }\n\n  activate_point(circleElement) {\n    /* Purpose: Animate the point circleElement (ex: this.element_selectors.circles[0]) on the screen. Used in presentation() lower down.*/\n    circleElement.classList.add('circle--active');\n    setTimeout(() => {\n      circleElement.classList.remove('circle--active');\n    }, blink);\n  }\n\n  start() {\n    /* Purpose: start the experiment*/\n    console.log('starting experiment', this.element_selectors.length);\n    for (\n      let i = 0;\n      i < Object.keys(this.element_selectors.circles).length;\n      i++\n    ) {\n      //FIXME Ne fonctionne pas, je veux cacher tous les éléments et afficher le bouton START\n      //TODO Regarder la partie AJAX du cours Javascript\n      console.log(this.element_selectors.cicles);\n      console.log(Object.keys(this.element_selectors.cicles[i]));\n\n      // this.element_selectors[\n      //   Object.keys(this.element_selectors)[i]\n      // ].classList.add('hidden');\n    }\n  }\n\n  /*  ----------------------------\n############## App Dynamics ##############\n  ---------------------------- */\n  counter_increment() {\n    this.counter += 1;\n  }\n\n  click() {\n    /**\n     * Handle touch events/clicks by logging the click into the response array and activating the point for some duration after the point\n     * has been touched\n     *\n     * @param {Type} paramName - Description of the parameter.\n     *\n     * @returns {Type} Description of the return value.\n     */\n  }\n\n  /*----------------------------------------------------------------------------------------------------------\n ******************************************** Display Methods ********************************************\n----------------------------------------------------------------------------------------------------------*/\n  explanations(before = true) {\n    /* Purpose: Display Explanations on the screen. Pass to the next explanation with the ok button \n    before=true indicates that the explanations served are presented before the start of training\n    before=false indicates that the explanations served are presented after the end of training\n    */\n\n    this.element_selectors.btn_ok.classList.remove('hidden');\n    if (before) {\n    } else {\n    }\n  }\n\n  reset_next() {\n    this.element_selectors.btn_next.classList.add('hidden');\n    this.element_selectors.txt_score_increase.classList.add('hidden');\n    document.querySelector('body').classList.remove('success');\n    document.querySelector('body').classList.remove('fail');\n    document.querySelector('body').classList.remove('moderate--failure');\n  }\n\n  hideFigure() {\n    /*Purpose: Hides the hexagon*/\n    this.element_selectors.container_confidence.classList.add('hidden');\n    this.element_selectors.progression_bar.classList.add('hidden');\n    this.element_selectors.fixation.classList.add('hidden');\n    for (let i = 0; i < element_selectors.circles.length; i++) {\n      this.element_selectors.circles[i].classList.add('hidden');\n    }\n  }\n\n  display_screen_next() {\n    /*Purpose: Display the screen with score update and next button*/\n    this.element_selectors.btn_next.classList.remove('hidden');\n    this.hideFigure();\n    this.element_selectors.txt_score_increase.classList.remove('hidden');\n  }\n\n  display_score_update(\n    confidence,\n    current_seq = this.seq[this.counter - 1],\n    current_sequence_response = this.response_sequences_after[this.counter - 1]\n  ) {\n    let { final_score, feedbackTXT } = score_update(\n      this.seq[this.counter - 1],\n      this.response_sequences_after[this.counter - 1],\n      (confidence + 1) * 100,\n      this.current_score,\n      this.element_selectors.txt_score_increase\n    );\n\n    let score_gain = final_score - this.current_score;\n\n    //Assessing performance and registering it to the data\n    if (current_seq.join() === current_sequence_response.join()) {\n      let current_performance = 'success';\n      this.performance.push(current_performance);\n\n      //update screen display of current gain or loss\n      feedbackTXT = `${feedbackTXT} \\n+${score_gain}`;\n\n      //Success animation\n      document.querySelector('body').classList.add('success');\n      setTimeout(function () {\n        document.querySelector('body').classList.remove('success');\n      }, 100);\n      setTimeout(function () {\n        document.querySelector('body').classList.add('success');\n      }, 250);\n    } else if (score_gain > 0) {\n      let current_performance = 'fail';\n\n      //update display of current gain or loss\n      feedbackTXT = `${feedbackTXT} \\n+${score_gain}`;\n      this.performance.push(current_performance);\n\n      //moderate--failure animation\n      document.querySelector('body').classList.add('moderate--failure');\n      setTimeout(function () {\n        document.querySelector('body').classList.remove('moderate--failure');\n      }, 100);\n      setTimeout(function () {\n        document.querySelector('body').classList.add('moderate--failure');\n      }, 250);\n    } else {\n      let current_performance = 'fail';\n\n      //update display of current gain or loss\n      feedbackTXT = `${feedbackTXT} \\n ${score_gain}`;\n\n      this.performance.push(current_performance);\n\n      //Fail animation\n      document.querySelector('body').classList.add('fail');\n      setTimeout(function () {\n        document.querySelector('body').classList.remove('fail');\n      }, 100);\n      setTimeout(function () {\n        document.querySelector('body').classList.add('fail');\n      }, 250);\n    }\n    this.confidence.push(confidence * 100);\n    this.score.push(final_score);\n    this.current_score = final_score;\n    this.display_screen_next();\n    this.last_click = Date.now();\n    return { final_score, feedbackTXT };\n  }\n\n  log_intermediate_data() {\n    var data_experiment = convertCSV(this);\n    console.log('intermediate data has been sent');\n    send_post(data_experiment);\n    /* Purpose: Logging a line with the new values in a common CSV */\n    let data2send = this;\n    console.log('data2send:', data2send);\n    postData(serverAddress, data2send).then(() => {\n      console.log('Data has been sent'); // JSON data parsed by `data.json()` call\n    });\n  }\n\n  /*--------------------------------------------------------------------------------------------------------\n ******************************************** Experiment timeline methods **********************************\n----------------------------------------------------------------------------------------------------------*/\n\n  presentation(seq = this.seq) {\n    /**\n     * display the sequences of positions one after the other on the screen\n     *\n     * @param {array} seq - The array containing the sequence to be played.\n     *\n     *\n     * @returns {animation} animate the screen based on the sequence pattern to be played\n     */\n    this.presentation_time = true;\n    this.element_selectors.fixation.classList.remove('hidden');\n    this.element_selectors.fixation.style.color = 'white';\n    for (let i = 0; i < this.element_selectors.circles.length; i++) {\n      this.element_selectors.circles[i].classList.remove('hidden');\n      //FIXME NEW\n      this.element_selectors.circles[i].classList.remove(\n        'circle--reproduction'\n      );\n    }\n\n    for (let i = 0; i < seq.length; i++) {\n      setTimeout(\n        () => this.activate_point(this.element_selectors.circles[seq[i]]),\n        SOA * (i + 1)\n      );\n    }\n\n    // update the progression bar\n    update_progression(completion);\n  }\n\n  reproduction() {\n    /* Purpose: display the response screen */\n    this.presentation_time = false;\n    for (let i = 0; i < this.element_selectors.circles.length; i++) {\n      this.element_selectors.circles[i].classList.add('circle--reproduction');\n    }\n    this.element_selectors.progression_bar.classList.remove('hidden');\n    this.element_selectors.container_confidence.classList.remove('hidden');\n  }\n\n  pre_rep_break() {\n    let total_break_time =\n      this.set_delay +\n      this.seq[this.counter].length * this.SOA +\n      this.break_time;\n\n    //purpose: creates a short break between end of presentation and start of reproduction\n    setTimeout(() => {\n      //hide the validation button to signify the break\n      this.element_selectors.fixation.classList.add('hidden');\n      if (this.state === 'training') {\n        this.element_selectors.pauseElement.classList.remove('hidden');\n      }\n    }, total_break_time - this.break_time);\n\n    setTimeout(() => {\n      //display the validation button and the fixation cross to signify start of reproduction\n      this.element_selectors.fixation.style.color = '#3bc9db';\n      this.element_selectors.fixation.classList.remove('hidden');\n      this.element_selectors.pauseElement.classList.add('hidden');\n      this.element_selectors.progression_bar.classList.remove('hidden');\n    }, total_break_time);\n\n    return total_break_time;\n  }\n\n  end_experiment() {\n    //Sends data to the server to write in CSV\n    var data_experiment = convertCSV(this);\n    console.log('data_experiment = ', data_experiment);\n\n    send_post(data_experiment);\n    this.hideFigure();\n    this.element_selectors.txt_container.classList.remove('hidden');\n    this.element_selectors.txt_container.textContent =\n      'You have finished the experiment. Thank you for your participation !';\n  }\n\n  trial(seq = this.seq[this.counter]) {\n    /* Purpose: Does one cycle of Presentation + Reproduction */\n    if (this.counter < this.seq.length - 1) {\n      this.presentation(seq);\n      let delay = this.pre_rep_break();\n      setTimeout(() => this.reproduction(), delay);\n      this.counter_increment();\n    } else {\n      this.end_experiment();\n    }\n  }\n\n  /*--------------------------------------------------------------------------------------------------------\n ******************************************** Debugging Methods **********************************\n----------------------------------------------------------------------------------------------------------*/\n\n  info() {\n    console.log(this);\n    console.log(this.element_selectors);\n    console.log('Tested sequences: ', this.seq);\n  }\n\n  testDataTransmission() {\n    /*>Purpose: Fill in an instance of the class with keys as values and sends the data to the server for test*/\n    const defaultValues = {\n      performance: [],\n      element_selectors: {},\n      confidence: [],\n      click_timings_before: [],\n      click_timings_after: [],\n      interclick_timings_before: [],\n      interclick_timings_after: [],\n      response_sequences_before: [],\n      response_sequences_after: [],\n      score: [],\n      survey: null, // Assuming survey is nullable\n    };\n\n    for (const key in defaultValues) {\n      if (this[key] === undefined || this[key] === null) {\n        this[key] = defaultValues[key];\n      }\n    }\n    this.end_experiment();\n  }\n}\n//#################################################################### END OF CLASS\n\n/* ==========================================\n-------------- Code Execution --------------\n========================================== */\n//Style the main container\ncontainerFigureElement.style.height = `${document.documentElement.clientHeight}px`;\ncontainerFigureElement.style.width = `${document.documentElement.clientWidth}px`;\nconst online_exp = new ExperimentCl();\nonline_exp.draw();\nconst element_selectors = online_exp.elements();\nonline_exp.init();\n\n/* ==========================================\n--------------------- TODO ------------------\n========================================== */\n\n/*\n1. Presentation of sequences\n2. Reproduction screen\n3. Capturing participants' inputs\n4. In real-time using node.js logging in their results in a csv\n    a. Logging a line with the new values in a common CSV\n    b. (at the end, create a new csv file with only data from this participant)\n\n*/\n\n/* NOTE\n=================================================\n+++++++++++++++++ Bug fixes +++++++++++++++++++++\n=================================================\n*/\n\n// Disable pinch zoom\ndocument.addEventListener('gesturestart', function (e) {\n  e.preventDefault();\n});\n\n// Disable double tap zoom\ndocument.addEventListener('dblclick', function (e) {\n  e.preventDefault();\n});\n\n//TODO\n// Régler le CSV de manière à avoir chaque ligne avec seq, response ... plutôt que toutes_seq puis toutes_reponses (faire comme dans le convertCSV de la V0)\n"],"names":["bodyElement","document","body","containerFigureElement","querySelector","txt_counter","style","height","documentElement","clientHeight","width","clientWidth","online_exp","constructor","sequences","randomized_sequences","participant_id","current_ID","original_seq","sequences_training","shuffled_sequences","shuffled_bloc2_sequences","seq","performance","element_selectors","confidence","counter","presentation_time","start_time","Date","now","click_timings_before","click_timings_after","interclick_timings_before","interclick_timings_after","response_sequences_before","response_sequences_after","score","current_score","initialScore","screen_width","window","screen","screen_height","set_delay","break_time","SOA","last_click","state","survey","sessionStorage","getItem","data_collection","response","index","t_now","push","arr_length","length","create_csv","draw","sizeBrowserBars","getSizeOfBrowserBars","windowHeight","innerHeight","documentHeight","urlBarHeight","outerHeight","bottomBarHeight","screen_size_height","screen_size_width","margin","padding","marginBody_topBottom","paddingBody_topBottom","centerX_containerFigure","offsetWidth","centerY_containerFigure","offsetHeight","fixationElement","createElement","classList","add","appendChild","pauseElement","textContent","top","left","fixationElement_height","fixationElement_width","circleElements","i","div","id","circle_radius","circle_coordinates_top","Math","sin","PI","circle_coordinates_left","cos","map","coord","figure_radius","btn_confidence","container_confidence","btn_training","transform","btn_ok","translate_up","btn_next","txt_score_increase","txt_score","txt_container","instruction_training_start","chart","chart_width","bar","progression_bar","getElementById","circles","fixation","init","addEventListener","keyEvent","instruction_training_end","remove","trial","setTimeout","k","console","log","final_score","feedbackTXT","display_score_update","log_intermediate_data","completion","progress","reset_next","elements","activate_point","circleElement","blink","start","Object","keys","cicles","counter_increment","click","explanations","before","hideFigure","display_screen_next","current_seq","current_sequence_response","score_update","score_gain","join","data_experiment","convertCSV","send_post","postData","serverAddress","then","presentation","color","update_progression","reproduction","pre_rep_break","total_break_time","end_experiment","info","testDataTransmission","defaultValues","key","undefined","e","preventDefault"],"version":3,"file":"animation_sequence.7d2c459f.js.map"}